知识点：
	1、布尔型的默认值为false。
	2、声明常量的前缀是const
	3、整形分为有符号和无符号两种。int和uint的长度相同，
		具体长度取决于不同编译器的实现当前编译器大多实现的是32位。
	4、Go里面也有直接定义好位数的类型：rune, int8, int16, int32, int64
		和byte, uint8, uint16,uint32, uint64。
		其中rune是int32的别称，byte是uint8的别称。
		需要注意的一点是，这些类型的变量之间不允许互相赋值或操作，不然会在编译时引起编译器报错。
	5、尽管现在平台实现的int长度是32bit，但是int和int32并不可以互用。
	6、浮点数有float64和float32两种，默认是float64.
	7、Go语言支持复数，格式为：var c complex64 = 5+5i  fmt.Printf("Value is: %v", c)//output: (5+5i)
	8、Go中的字符串都是采用UTF-8字符集编码。
		字符串是用一对双引号（""）或反引号（` `）括起来定义，
		它的类型是string。请注意，这里时反引号，不是单引号，和波浪线在一起的那个符号。
		用反引号定义的字符串在代码中的形式就是打印时的形式，没有字符转义，换行也原样输出。
	9、Go中的字符串是不可变的。如果想要修改，可以先将字符串转为[]byte类型，然后修改后再转回string类型
	10、可以用两个+号连接两个字符串。
	11、make和new的区别。
		new返回一个指针。new(T),申请了一块T类型大小的内存，并将该内存的地址返回。该指针指向新分配的类型T的零值。
		make只能创建slice、map和channel。make(T,args)返回一个有初始值的、非零的T类型。
		这里的非零是指相对于一个空的或者零值的slice、map或者channel而言。
		本质上来讲，导致这三个类型有所不同的原因是指向数据结构的引用在使用前必须被初始化。
		例如，一个slice，是一个包含指向数据的指针、长度和容量的三项描述符；在这些项目被初始化前，slice为nil。
		对于slice、map和channel来说，make初始化了内部的数据结构，并填充了适当的值。
	12、Go语言的条件判断语句里面允许声明一个变量，其作用域只能在该条件逻辑块内。
	13、使用goto语句时，必须先定义一个标签。并且，标签和goto语句必须在同一个函数内。
	14、map遍历时是无序的。不保证每次都能是同一个顺序。不能单独修改map中value的一部分，
		例如一个key对应的value是一个结构体，修改结构体的某一个值是不可以的，必须要整体修改，就是给value新赋值一个结构体。
	15、fallthrough用在switch语句中，是说：不判断下一个case成不成立，直接继续执行下一个case。
	16、